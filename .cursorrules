# PRCV2025 多模态人员重识别项目 Cursor Rules

## 项目概述
这是一个支持多模态融合的人员重识别系统，包括图像模态（可见光、彩绘、红外、素描）和文本模态。相关资料在docs目录下。有描述冲突以官方描述为准。

## 代码风格和规范

### Python 代码规范
- 所有 Python 代码必须有清晰的中文注释
- 函数和类必须有详细的 docstring，说明参数、返回值和功能
- 变量名使用有意义的英文名称，注释使用中文
- 代码缩进使用 4 个空格
- 每行代码不超过 120 个字符

### 文件组织
- 临时脚本（调试、测试脚本）统一放在 `tools/` 目录下
- 模型文件放在 `models/` 目录下
- 数据集处理代码放在 `datasets/` 目录下
- 损失函数放在 `losses/` 目录下
- 配置文件放在 `configs/` 目录下


## 多模态ReID特定规范

### 模态定义
项目支持以下模态：
- `vis`: 可见光图像
- `cp`: 彩色偏振图像  
- `nir`: 近红外图像
- `sk`: 素描图像
- `text`: 文本描述

### 数据加载器规范（仅供参考）
```python
# 多模态数据加载器示例
def create_multimodal_dataloader(config):
    """
    创建多模态数据加载器
    
    Args:
        config (dict): 配置字典，包含数据路径、模态等信息
    
    Returns:
        DataLoader: 多模态数据加载器
    """
    dataset = MultiModalORBDataset(
        root=config['data_root'],
        mode='train',
        modalities=config.get('modalities', ['vis', 'cp', 'nir', 'sk']),
        transform=get_transforms()
    )
    
    return DataLoader(
        dataset,
        batch_size=config['batch_size'],
        shuffle=True,
        num_workers=config.get('num_workers', 0),
        pin_memory=torch.cuda.is_available(),
        collate_fn=compatible_collate_fn,
        drop_last=True
    )
```

### 模型架构规范（仅供参考）
```python
class MultiModalReIDModel(nn.Module):
    """
    多模态ReID模型
    
    支持多模态特征融合，包括：
    1. 图像模态特征提取
    2. 文本模态特征提取（可选）
    3. 多模态特征融合
    4. 身份分类和度量学习
    """
    
    def __init__(self, num_classes, image_modalities, use_text=True, feat_dim=2048):
        """
        初始化多模态ReID模型
        
        Args:
            num_classes (int): 身份类别数量
            image_modalities (list): 图像模态列表
            use_text (bool): 是否使用文本模态
            feat_dim (int): 特征维度
        """
        super().__init__()
        # 实现细节...
    
    def forward(self, data_dict):
        """
        前向传播
        
        Args:
            data_dict (dict): 多模态输入数据
                - 'vis': 可见光图像
                - 'cp': 彩绘图像
                - 'nir': 红外图像
                - 'sk': 素描图像
                - 'text': 文本描述（可选）
        
        Returns:
            tuple: (features, logits) 特征向量和分类输出
        """
        # 实现细节...
```

## 验证和提交规范

### 验证流程
1. **查询集**：包含78526个查询，支持以下模态组合：
   - 单模态：NIR、CP、SK、VIS
   - 双模态：TEXT+CP、TEXT+SK、TEXT+NIR、NIR+CP、NIR+SK、CP+SK
   - 三模态：TEXT+NIR+SK、TEXT+NIR+CP、TEXT+CP+SK、NIR+CP+SK
   - 四模态：TEXT+NIR+CP+SK
2. **画廊集**：gallery目录下的照片（vis光照类型）
3. **任务**：根据查询内容在gallery中找到最相似的100张照片
4. **输出**：按相似度由高到低返回前100个gallery图像ID

### 重要说明
- **验证集无身份标签**：验证集仅用于生成提交结果，无法直接计算评估指标
- **评估方式**：只有将推理结果CSV文件上传至举办方才能获得准确的mAP@100指标
- **本地验证**：可以在训练集上划分验证集进行本地性能评估，但最终指标以举办方评估为准

### 模型评估指标
项目使用以下标准评估指标：

#### mAP (Mean Average Precision)
- **定义**：平均精度均值，衡量检索的整体性能
- **计算**：对所有查询的平均精度求平均
- **范围**：0-1，越高越好

### 评估函数示例（仅供参考）
```python
def evaluate_reid_performance(query_features, gallery_features, query_labels, gallery_labels):
    """
    评估ReID性能
    
    Args:
        query_features (torch.Tensor): 查询特征 [N, feat_dim]
        gallery_features (torch.Tensor): 画廊特征 [M, feat_dim]
        query_labels (torch.Tensor): 查询标签 [N]
        gallery_labels (torch.Tensor): 画廊标签 [M]
    
    Returns:
        dict: 包含mAP, Rank-1, Rank-5的评估结果
    """
    # 计算相似度矩阵
    similarity_matrix = torch.mm(query_features, gallery_features.t())
    
    # 计算mAP
    mAP = calculate_map(similarity_matrix, query_labels, gallery_labels)
    
    # 计算Rank-1和Rank-5
    rank1_acc = calculate_rank_accuracy(similarity_matrix, query_labels, gallery_labels, k=1)
    rank5_acc = calculate_rank_accuracy(similarity_matrix, query_labels, gallery_labels, k=5)
    
    return {
        'mAP': mAP,
        'Rank-1': rank1_acc,
        'Rank-5': rank5_acc
    }
```

### 提交文件格式
共78526个查询（与val_queries.json中的query_idx一致），每个查询返回前100个最相似的gallery图像ID：

```csv
query_idx,query_type,ranking_list_idx
1,onemodal_NIR,"[5,9,856,126,324,1768,…]"
2,onemodal_NIR,"[823,456,16,94,532,…]"
...
43145,twomodal_TEXT_CP,"[1907,823,456,16,94,532,…]"
...
78526,fourmodal_TEXT_NIR_CP_SK,"[662,279,147,823,456,…]"
```

### 查询类型规范
验证集包含以下查询类型组合：

#### 单模态查询 (onemodal_*)
- `onemodal_NIR`: 仅近红外图像
- `onemodal_CP`: 仅彩绘图像
- `onemodal_SK`: 仅素描图像
- `onemodal_VIS`: 仅可见光图像

#### 双模态查询 (twomodal_*)
- `twomodal_TEXT_CP`: 文本描述 + 彩绘图像
- `twomodal_TEXT_SK`: 文本描述 + 素描图像
- `twomodal_TEXT_NIR`: 文本描述 + 近红外图像
- `twomodal_NIR_CP`: 近红外图像 + 彩绘图像
- `twomodal_NIR_SK`: 近红外图像 + 素描图像
- `twomodal_CP_SK`: 彩绘图像 + 素描图像

#### 三模态查询 (threemodal_*)
- `threemodal_TEXT_NIR_SK`: 文本描述 + 近红外图像 + 素描图像
- `threemodal_TEXT_NIR_CP`: 文本描述 + 近红外图像 + 彩绘图像
- `threemodal_TEXT_CP_SK`: 文本描述 + 彩绘图像 + 素描图像
- `threemodal_NIR_CP_SK`: 近红外图像 + 彩绘图像 + 素描图像

#### 四模态查询 (fourmodal_*)
- `fourmodal_TEXT_NIR_CP_SK`: 文本描述 + 近红外图像 + 彩绘图像 + 素描图像

### 验证集标注格式
```json
{
  "query_idx": 43145,
  "query_type": "twomodal_TEXT_CP",
  "content": [
    "A young man of medium height and build, with short black hair...",
    "cp/1907.jpg"
  ]
}
```

```json
{
  "query_idx": 78526,
  "query_type": "fourmodal_TEXT_NIR_CP_SK",
  "content": [
    "A young man of medium height and build, with short black hair...",
    "nir/662.jpg",
    "cp/279.jpg",
    "sk/147.jpg"
  ]
}
```

## 开发环境规范

### 终端命令
- 默认使用 PowerShell 命令（Windows系统）
- 使用相对路径引用项目文件
- 确保在正确的项目目录下执行命令

### 代码注释
- 所有函数和类必须有清晰的中文注释
- 复杂逻辑需要逐行注释
- 重要参数和返回值需要说明

## 测试和调试

### 调试脚本
- 所有调试脚本放在 `tools/` 目录下
- 使用有意义的文件名，如 `debug_dataloader.py`
- 调试完成后及时清理临时文件

### 单元测试
- 为关键函数编写单元测试
- 测试多模态数据处理的正确性
- 验证损失函数的计算准确性

### 文件忽略
- 在 `.gitignore` 中忽略临时文件、日志、检查点等
- 不要提交大型数据文件
- 保护敏感配置信息

### 评估指标详解
项目使用标准的ReID评估指标：

#### mAP (Mean Average Precision)
- **定义**：平均精度均值，衡量检索的整体性能
- **计算**：对所有查询的平均精度求平均
- **范围**：0-1，越高越好
- **意义**：综合考虑了检索的准确性和完整性

## 注意事项

### 重要提醒
1. **验证集无身份标签**：验证集仅用于生成提交结果，无法直接计算评估指标
2. **评估方式**：只有将推理结果CSV文件上传至举办方才能获得准确的mAP、Rank-1、Rank-5等指标
3. **本地验证**：可以在训练集上划分验证集进行本地性能评估，但最终指标以举办方评估为准
4. 训练时只能使用训练集数据
5. 支持跨模态检索和多模态查询
6. gallery照片属于vis光照类型
7. 多模态训练时注意内存管理