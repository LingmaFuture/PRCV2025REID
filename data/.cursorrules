# PRCV2025 多模态人员重识别数据集规范

## 数据集概述

### 数据集信息
- **数据集**: ORBench
- **开发方**: 华中科技大学团队
- **用途**: PRCV2025全模态行人重识别挑战赛

### 数据集规模
- **总身份数**: 1000个身份
- **RGB图像**: 45113张
- **红外图像**: 26071张  
- **彩铅画**: 18000幅
- **素描画**: 18000幅
- **文本描述**: 45113条

### 数据划分
- **训练集**: 400个身份
- **验证集**: 200个身份  
- **测试集**: 400个身份（竞赛期间不公开）

## 数据集结构

```
data/
├── train/                    # 训练集（400个身份）
│   ├── vis/                 # 可见光图像 (RGB)
│   │   ├── 0001/           # 身份ID目录
│   │   │   ├── 0001_llcm_0001_back_0_vis.jpg
│   │   │   ├── 0001_llcm_0001_side_3_vis.jpg
│   │   │   └── ...
│   │   ├── 0004/
│   │   ├── ...
│   │   └── 0999/
│   ├── cp/                  # 彩绘图像 (Color Polarization)
│   ├── nir/                 # 近红外图像 (Near Infrared)
│   ├── sk/                  # 素描图像 (Sketch)
│   │   ├── 0001/
│   │   │   ├── 0001_llcm_0001_back_0_sketch.jpg
│   │   │   └── ...
│   │   ├── ...
│   │   └── 0999/
│   └── text_annos.json      # 文本标注文件
└── val/                     # 验证集（200个身份）
    ├── gallery/             # 画廊集（参考图像，vis模态）
    │   ├── 1.jpg
    │   ├── 2.jpg
    │   ├── ...
    │   └── 9999.jpg
    ├── vis/                 # 验证集可见光查询
    ├── cp/                  # 验证集彩绘查询
    ├── nir/                 # 验证集红外查询
    ├── sk/                  # 验证集素描查询
    ├── val_queries.json     # 验证集查询标注
    └── val_queries.csv      # 验证集查询列表
```

## 模态定义

### 支持的模态类型
1. **vis** (Visible Light): 可见光图像，标准RGB图像
2. **cp** (Color Polarization): 彩绘艺术风格图像，艺术化特征
3. **nir** (Near Infrared): 近红外图像，不受光照影响
4. **sk** (Sketch): 素描艺术风格图像，突出轮廓线条特征
5. **text**: 文本描述，语言描述的外观信息

## 查询类型规范

### 单模态查询 (onemodal_*)
- `onemodal_NIR`: 仅近红外图像
- `onemodal_CP`: 仅彩绘图像
- `onemodal_SK`: 仅素描图像
- `onemodal_VIS`: 仅可见光图像

### 双模态查询 (twomodal_*)
- `twomodal_TEXT_CP`: 文本描述 + 彩绘图像
- `twomodal_TEXT_SK`: 文本描述 + 素描图像
- `twomodal_TEXT_NIR`: 文本描述 + 近红外图像
- `twomodal_NIR_CP`: 近红外图像 + 彩绘图像
- `twomodal_NIR_SK`: 近红外图像 + 素描图像
- `twomodal_CP_SK`: 彩绘图像 + 素描图像

### 三模态查询 (threemodal_*)
- `threemodal_TEXT_NIR_SK`: 文本描述 + 近红外图像 + 素描图像
- `threemodal_TEXT_NIR_CP`: 文本描述 + 近红外图像 + 彩绘图像
- `threemodal_TEXT_CP_SK`: 文本描述 + 彩绘图像 + 素描图像
- `threemodal_NIR_CP_SK`: 近红外图像 + 彩绘图像 + 素描图像

### 四模态查询 (fourmodal_*)
- `fourmodal_TEXT_NIR_CP_SK`: 文本描述 + 近红外图像 + 彩绘图像 + 素描图像

## 数据加载规范

### 基于JSON标注的数据加载逻辑

#### 核心原则
1. **以JSON标注为主要依据**: 使用`text_annos.json`中的身份ID作为数据集加载的主要依据
2. **文件路径对应关系**: 通过JSON中的`file_path`字段确定图片路径，移除`vis/`前缀后匹配实际目录结构
3. **多模态完整性检查**: 确保所有模态（vis, nir, sk, cp）都有对应的目录

#### 数据加载流程
```python
def _load_annotations(self):
    """加载标注文件 - 正确处理文件路径对应关系"""
    with open(self.config.json_file, 'r', encoding='utf-8') as f:
        annotations_list = json.load(f)
    
    # 按身份ID分组文本标注，同时记录文件路径
    self.id_to_annotations = {}
    self.id_to_files = {}
    
    for item in annotations_list:
        person_id = item['id']
        file_path = item['file_path']
        caption = item['caption']
        
        if person_id not in self.id_to_annotations:
            self.id_to_annotations[person_id] = []
            self.id_to_files[person_id] = []
        
        self.id_to_annotations[person_id].append(caption)
        # 移除vis/前缀，匹配实际目录结构
        actual_path = file_path.replace('vis/', '')
        self.id_to_files[person_id].append(actual_path)
    
    # 为每个身份创建合并的文本描述
    self.annotations = {}
    for person_id, captions in self.id_to_annotations.items():
        person_id_str = f"{person_id:04d}"
        # 合并该身份的所有文本描述
        combined_caption = ' '.join(captions)
        self.annotations[person_id_str] = combined_caption
```

#### 身份ID获取逻辑
```python
def _get_available_person_ids(self):
    """获取可用的person_ids - 基于json标注"""
    # 使用json中的身份ID作为主要依据
    json_ids = set(self.id_to_annotations.keys())
    
    # 检查这些身份在其他模态中是否有对应的目录
    final_ids = []
    for pid in json_ids:
        # 检查所有模态是否都有这个身份
        all_modalities_available = True
        for modality in self.modality_folders:
            modality_path = os.path.join(self.config.data_root, modality, f"{pid:04d}")
            if not os.path.exists(modality_path):
                all_modalities_available = False
                break
        
        if all_modalities_available:
            final_ids.append(pid)
    
    return sorted(final_ids)
```

#### 图像路径缓存逻辑
```python
def _cache_image_paths(self):
    """缓存图像路径 - 基于json文件路径"""
    self.image_cache = {}
    
    for data in self.data_list:
        person_id = data['person_id']
        person_id_str = data['person_id_str']
        self.image_cache[person_id_str] = {}
        
        # 对于vis模态，使用json中的文件路径
        if person_id in self.id_to_files:
            vis_files = self.id_to_files[person_id]
            self.image_cache[person_id_str]['vis'] = []
            
            for file_path in vis_files:
                # 移除vis/前缀，构建完整路径
                actual_path = file_path.replace('vis/', '')
                full_path = os.path.join(self.config.data_root, 'vis', actual_path)
                if os.path.exists(full_path):
                    self.image_cache[person_id_str]['vis'].append(full_path)
        
        # 对于其他模态，检查目录是否存在
        for modality in ['nir', 'sk', 'cp']:
            folder_path = os.path.join(self.config.data_root, modality, person_id_str)
            
            if os.path.exists(folder_path):
                images = [f for f in os.listdir(folder_path) 
                         if f.lower().endswith(('.jpg', '.jpeg', '.png', '.bmp'))]
                self.image_cache[person_id_str][modality] = [
                    os.path.join(folder_path, img) for img in images
                ]
            else:
                self.image_cache[person_id_str][modality] = []
```

### 训练阶段
```python
# 训练时只能使用训练集数据
train_dataset = MultiModalORBDataset(
    root='data/train',
    mode='train',
    modalities=['vis', 'cp', 'nir', 'sk'],
    use_text=True
)
```

### 验证阶段
```python
# 验证集无身份标签，仅用于生成提交结果
val_queries = load_val_queries('data/val/val_queries.json')
gallery_dataset = ORBDataset(
    root='data/val',
    mode='val',
    mod='gallery'  # 画廊集
)
```

### 重要限制
1. **验证集无身份标签**: 验证集仅用于生成提交结果，无法直接计算评估指标
2. **训练数据限制**: 训练时只能使用训练集数据
3. **外部数据禁止**: 严禁使用其他数据集
4. **JSON标注优先**: 必须以JSON标注文件为主要依据进行数据加载

### 数据加载关键注意事项

#### 身份ID对应关系
- **JSON标注中的身份ID**: 1-600，共400个身份
- **目录结构中的身份ID**: 1-999，共400个身份（不连续）
- **实际可用身份ID**: 164个（同时有JSON标注和其他模态图像的身份）

#### 文件路径处理
- **JSON中的路径格式**: `vis/0001/0001_llcm_0001_c03_s184251_f31995_vis.jpg`
- **实际目录路径**: `0001/0001_llcm_0001_c03_s184251_f31995_vis.jpg`
- **处理方式**: 移除`vis/`前缀后匹配实际目录结构

#### 多模态数据完整性
- **vis模态**: 基于JSON中的`file_path`字段加载
- **nir/sk/cp模态**: 基于目录结构检查，确保所有模态都有对应目录
- **文本模态**: 合并同一身份的所有文本描述

#### 数据加载最佳实践
1. **优先使用JSON标注**: 以`text_annos.json`为主要数据源
2. **文件路径验证**: 确保JSON中的文件路径在实际目录中存在
3. **多模态检查**: 验证所有模态都有对应的图像文件
4. **错误处理**: 对缺失的文件或目录进行适当的错误处理
5. **性能优化**: 缓存图像路径，避免重复的文件系统访问

#### 数据加载调试和验证
```python
# 验证数据加载正确性的调试脚本
def validate_data_loading():
    """验证数据加载的正确性"""
    # 1. 检查JSON标注和目录结构的对应关系
    json_ids = set(annotations.keys())
    dir_ids = set(os.listdir(vis_path))
    
    # 2. 验证文件路径匹配
    json_files = set([f.replace('vis/', '') for f in json_file_paths])
    dir_files = set(actual_directory_files)
    
    # 3. 检查多模态完整性
    for person_id in final_ids:
        for modality in ['vis', 'nir', 'sk', 'cp']:
            modality_path = os.path.join(data_root, modality, f"{person_id:04d}")
            assert os.path.exists(modality_path), f"Missing {modality} for person {person_id}"
    
    # 4. 验证图像文件可读性
    for file_path in cached_image_paths:
        assert os.path.exists(file_path), f"Image file not found: {file_path}"
        # 尝试加载图像验证完整性
        try:
            Image.open(file_path).convert('RGB')
        except Exception as e:
            print(f"Error loading image {file_path}: {e}")
```

#### 常见问题和解决方案
1. **身份ID不匹配**: 使用JSON中的身份ID作为主要依据
2. **文件路径错误**: 正确处理`vis/`前缀的移除
3. **多模态缺失**: 检查所有模态的目录完整性
4. **内存不足**: 使用图像路径缓存和延迟加载
5. **性能问题**: 优化文件系统访问和图像预处理

## 检索任务规范

### 任务目标
- **目标模态**: RGB图像（vis）作为gallery
- **查询模态**: 红外、彩铅、素描、文本及其组合
- **检索目标**: 从gallery中找到与query最相似的RGB图像

### 提交格式
```csv
query_idx,query_type,ranking_list_idx
1,onemodal_NIR,"[5,9,856,126,324,1768,…]"
2,onemodal_NIR,"[823,456,16,94,532,…]"
...
43145,twomodal_TEXT_CP,"[1907,823,456,16,94,532,…]"
...
78526,fourmodal_TEXT_NIR_CP_SK,"[662,279,147,823,456,…]"
```
共78526个查询，每个查询包含100个检索结果

## 评估指标

### 主要指标
- **mAP (Mean Average Precision)**: 平均精度均值，衡量检索的整体性能
- **Rank-1**: 第一名正确率，衡量精确匹配能力
- **Rank-5**: 前五名包含正确答案的比例
- **Rank-10**: 前十名包含正确答案的比例

### 评估方式
- **初赛**: 在Kaggle平台提交CSV文件，实时获得mAP分数
- **复赛**: 组织方在测试集上评估，使用四个模态组合mAP的平均值

## 文件命名规范

### 训练集文件命名规范
```
{identity_id}_{dataset}_{image_id}_{view}_{angle}_{modality}.jpg
```

#### 字段说明
- **{identity_id}**: 身份ID，4位数字 (如: 0001, 0007, 0009, 0011)
- **{dataset}**: 数据集名称 (如: llcm)
- **{image_id}**: 图像ID，4位数字 (如: 0001, 0009, 0012, 0015)
- **{view}**: 视角描述 (如: back, side, front, c04, c05)
- **{angle}**: 角度信息 (如: 0, 2, 3, s183200_f15900, s181218_f14505)
- **{modality}**: 模态类型 (如: vis, colorpencil, nir, sketch)

#### 实际示例
- **可见光**: `0011_llcm_0015_c04_s181218_f14505_vis.jpg`
- **彩绘**: `0001_llcm_0001_back_0_colorpencil.jpg`
- **近红外**: `0009_llcm_0012_c05_s183200_f15900_nir.jpg`
- **素描**: `0007_llcm_0009_back_2_sketch.jpg`

### 验证集文件
- 验证集: `{image_id}.jpg`

### 标注文件
- 训练集文本: `text_annos.json`
- 验证集查询json: `val_queries.json`
- 验证集查询csv: `val_queries.csv`

### 提交文件
- 格式: CSV文件
- 编码: UTF-8
- 分隔符: 逗号
- 引号: 双引号包围列表

## 标注文件格式规范

### 训练集文本标注文件 (text_annos.json)

#### 数据结构（训练集文本标注文件，与vis光照类型的图片一一对应）
```json
[
    {
        "id": 1,
        "file_path": "vis/0001/0001_llcm_0001_c03_s184251_f31995_vis.jpg",
        "caption": "A lean young man of medium height and jet-black short hair. He wears a maroon long-sleeved jacket on top, and a pair of black trousers that reach down to his ankles. On his feet are a pair of gray sneakers.",
        "split": "train"
    },
    {
        "id": 1,
        "file_path": "vis/0001/0001_llcm_0001_c03_s184251_f32010_vis.jpg",
        "caption": "A young man, of medium build and height, sports a head of dense, short black hair. On him is a top with a red body and black sleeves, complemented by what appears to be a pair of black glasses perched on his nose. Below, he opts for loose black trousers that reach down to his ankles, paired with casual shoes featuring gray uppers and white soles.",
        "split": "train"
    },
    ...
    {
        "id": 600,
        "file_path": "vis/0999/0999_sysu_0532_cam4_0010_vis.jpg",
        "caption": "A young man of moderate build and average height. His hair is a lustrous, jet-black crew cut. At this moment, he is wearing a long-sleeved jacket in deep blue, complete with a matching cap in the same hue. He pairs this with a black pant that reaches down to his ankles. On his feet are a pair of sneakers in black and white, featuring white accents on the sides and an entirely black sole.",
        "split": "train"
    },
    {
        "id": 600,
        "file_path": "vis/0999/0999_sysu_0532_cam5_0010_vis.jpg",
        "caption": "A young man of medium height and well-proportioned build, with thick short black hair and glasses perched on his nose. He is wearing a long-sleeved jacket in dark blue, with white letters printed on the left side of the chest. Below, he has on a pair of black trousers that extend down to his ankles. On his feet are black-and-white shoes, the soles of which are white. In his hand, he holds a foldable black umbrella.",
        "split": "train"
    }
]
```

#### 字段说明
- **id**: 身份ID (整数，1-999)
- **file_path**: 图像文件路径，相对于训练集根目录
- **caption**: 英文文本描述，详细描述人物的外观特征
- **split**: 数据分割标识 ("train")

### 验证集查询标注文件 (val_queries.json)

#### 数据结构
```json
[
    {
        "query_idx": 1,
        "query_type": "onemodal_NIR",
        "content": ["nir/1.jpg"]
    },
    {
        "query_idx": 43145,
        "query_type": "twomodal_TEXT_CP",
        "content": [
            "A young man of medium height and build, with short black hair...",
            "cp/1907.jpg"
        ]
    }
]
```

#### 字段说明
- **query_idx**: 查询索引 (整数，1-78526)
- **query_type**: 查询类型 (字符串，如 "onemodal_NIR", "twomodal_TEXT_CP")
- **content**: 查询内容数组
  - 单模态查询: 包含1个元素 (图像路径或文本描述)
  - 多模态查询: 包含多个元素 (文本描述 + 图像路径)

## 注意事项

### 重要提醒
1. **验证集无身份标签**: 验证集仅用于生成提交结果，无法直接计算评估指标
2. **评估方式**: 只有将推理结果CSV文件上传至举办方才能获得准确的mAP指标
3. **本地验证**: 可以在训练集上划分验证集进行本地性能评估，但最终指标以举办方评估为准
4. **训练限制**: 训练时只能使用训练集数据
5. **跨模态检索**: 支持不同模态间的检索
6. **gallery类型**: gallery照片属于vis光照类型 